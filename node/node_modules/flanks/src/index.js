#!/usr/bin/env node

const package = require('../package.json');
const axios_npm = require('axios');

if (!process.env.OAUTH_TOKEN) {
    throw new Error('No OAUTH_TOKEN env variable defined');
}
if (typeof process.env.OAUTH_TOKEN !== 'string') {
    throw new TypeError('Invalid OAuth Token');
}

const OAUTH_TOKEN = process.env.OAUTH_TOKEN;

const axios = axios_npm.create({
    headers: {
        'Content-Type': 'application/json',
        'Pragma': 'no-cache',
        'Authorization': `Bearer ${OAUTH_TOKEN}`,
    },
});

/**
 * @summary Aggregates data from bank accounts.
 * @async
 * @param {object} options
 * @param {string} [options.user_token] Auth token to use instead of user/password/bank
 * @param {string} options.user Username
 * @param {string} options.password Password
 * @param {string} options.bank Bank to access
 * @throws Error if missing arguments (must supply either user_token or user-password-bank) or if incorrect types. Axios exceptions.
 * @returns Axios response. See docs for 'data' schema.
 */
const getAccountData = async function getAccountData(options) {
    if (!options) {
        throw new SyntaxError('No arguments provided');
    }
    if (!options.user_token) {
        if (!(options.user && options.password && options.bank)) {
            throw new SyntaxError('Missing arguments');
        }
        if (typeof options.user !== 'string') {
            throw new TypeError('Username must be a string');
        } else if (typeof options.password !== 'string') {
            throw new TypeError('Password must be a string');
        } else if (typeof options.bank !== 'string') {
            throw new TypeError('Bank must be a string');
        }
    } else {
        if (typeof options.user_token !== 'string') {
            throw new TypeError('User token must be a string');
        }
    }
    

    let queryParams;
    if (options.user_token) {
        queryParams = { user_token: options.user_token };
    } else {
        queryParams = {
            user: options.user,
            password: options.password,
            bank: options.bank,
        };
    }

    const accountData = await axios.post('https://sandbox.flanks.io/server/api/aggregation/data', queryParams);
    return accountData;
};

/**
 * @summary Creates a user, returning a user token.
 * @async
 * @param {object} options
 * @param {string} options.user Username
 * @param {string} options.password Password
 * @param {string} options.bank Bank to access
 * @throws Error if missing arguments (must supply user-password-bank) or if incorrect types. Axios exceptions.
 * @returns Axios response. See docs for 'data' schema.
 */
const createUser = async function createUser(options) {
    if (!options) {
        throw new SyntaxError('No arguments provided');
    }
    if (!(options.user && options.password && options.bank)) {
        throw new SyntaxError('Missing arguments');
    }
    if (typeof options.user !== 'string') {
        throw new TypeError('Username must be a string');
    } else if (typeof options.password !== 'string') {
        throw new TypeError('Password must be a string');
    } else if (typeof options.bank !== 'string') {
        throw new TypeError('Bank must be a string');
    }

    const queryParams = {
        username: options.user,
        password: options.password,
        bank: options.bank,
    };

    const userData = await axios.post('https://sandbox.flanks.io/server/api/aggregation/user', queryParams);
    return userData;
};


/**
 * @summary Deletes an existing user.
 * @async
 * @param {object} options
 * @param {string} options.user_token The user token of the user to delete.
 * @throws Error if missing arguments or if incorrect types. Axios exceptions.
 * @returns Axios response. See docs for 'data' schema.
 */
const deleteUser = async function deleteUser(options) {
    if (!options) {
        throw new SyntaxError('No arguments provided');
    }
    if (!options.user_token) {
        throw new SyntaxError('Missing arguments');
    }
    if (typeof options.user_token !== 'string') {
        throw new TypeError('User token must be a string');
    }

    const queryParams = { user_token: options.user_token };

    // Axios' DELETE method needs the payload encoded different from POST method
    const accountData = await axios.delete('https://sandbox.flanks.io/server/api/aggregation/user', { data: queryParams });
    return accountData;
};


module.exports = {
    getAccountData,
    createUser,
    deleteUser,
};